{"version":3,"sources":["../../lib/client/worker.ts"],"names":["NativeSandbox","require","Sandbox","RUNTIME","fs","readFileSync","path","join","__dirname","toString","wrapCode","code","JSON","stringify","Worker","constructor","message","type","initialize","execute","callback","exit","Error","native","process","argv","template","reset","connect","_execute","autoFinish","force","initialized","connected","disconnect","id","args","off","handleMessage","worker","on"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nconst NativeSandbox = require('bindings')('sandbox').Sandbox;\n\nconst RUNTIME = fs.readFileSync(path.join(__dirname, 'runtime.js')).toString();\n\nconst wrapCode = (code) => {\n  return `\n    global._code = ${ JSON.stringify(code) };\n    global._execute();\n  `;\n};\n\nexport default class Worker {\n  native: any;\n\n  connected: boolean;\n\n  constructor() {\n    this.native = new NativeSandbox(process.argv[2]);\n  }\n\n  initialize({ template }) {\n    this.reset(true);\n\n    this.connect();\n\n    const code = [\n      RUNTIME,\n      wrapCode(template),\n      'setResult()'\n    ].join('\\n');\n\n    this._execute(code, false);\n  }\n\n  execute({ code }) {\n    this.reset(false);\n\n    this.connect();\n\n    this._execute(wrapCode(code), true);\n  }\n\n  _execute(code, autoFinish) {\n    return this.native.execute(code, autoFinish);\n  }\n\n  reset(force) {\n    if (force || !this.native.initialized) {\n      this.native.initialize();\n      this.native.initialized = true;\n    }\n  }\n\n  connect() {\n    if (this.connected) {\n      return;\n    }\n\n    this.native.connect();\n    this.connected = true;\n  }\n\n  disconnect() {\n    if (!this.connected) {\n      return;\n    }\n\n    this.native.disconnect();\n    this.connected = false;\n  }\n\n  callback({ id, args }) {\n    this.native.callback(id, JSON.stringify(args));\n  }\n\n  exit(message) {\n    this.disconnect();\n    process.off('message', this.handleMessage);\n  }\n\n  handleMessage = (message) => {\n    switch (message.type) {\n      case 'initialize':\n        return this.initialize(message);\n      case 'execute':\n        return this.execute(message);\n      case 'callback':\n        return this.callback(message);\n      case 'exit':\n        return this.exit(message);\n      default:\n        throw new Error('invalid message');\n    }\n  };\n}\n\nconst worker = new Worker();\n\nprocess.on('message', worker.handleMessage);\n"],"file":"worker.js"}