{"version":3,"sources":["../../lib/client/worker.js"],"names":["NativeSandbox","require","Sandbox","RUNTIME","fs","readFileSync","path","join","__dirname","toString","Worker","constructor","message","type","execute","callback","id","JSON","stringify","args","disconnect","process","off","worker","handleMessage","native","argv","code","template","reset","connect","wrappedCode","result","send","initialized","initialize","connected","on"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoB,SAApB,EAA+BC,OAArD;;AAEA,MAAMC,OAAO,GAAGC,YAAGC,YAAH,CAAgBC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,YAArB,CAAhB,EAAoDC,QAApD,EAAhB,C,CACA;;;AAEe,MAAMC,MAAN,CAAa;AAC1BC,EAAAA,WAAW,GAAG;AAAA,2CAkDGC,OAAD,IAAa;AAC3B,UAAIA,OAAO,CAACC,IAAR,KAAiB,SAArB,EAAgC;AAC9B,aAAKC,OAAL,CAAaF,OAAb;AACD,OAFD,MAEO,IAAIA,OAAO,CAACC,IAAR,KAAiB,UAArB,EAAiC;AACtC,aAAKE,QAAL,CAAcH,OAAO,CAACI,EAAtB,EAA0BC,IAAI,CAACC,SAAL,CAAeN,OAAO,CAACO,IAAvB,CAA1B;AACD,OAFM,MAEA,IAAIP,OAAO,CAACC,IAAR,KAAiB,MAArB,EAA6B;AAClC,aAAKO,UAAL;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,MAAM,CAACC,aAA9B;AACD;AACF,KA3Da;;AACZ,SAAKC,MAAL,GAAc,IAAIzB,aAAJ,CAAkBqB,OAAO,CAACK,IAAR,CAAa,CAAb,CAAlB,CAAd;AACD;;AAEDZ,EAAAA,OAAO,CAAC;AAAEa,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,EAAqB;AAC1B,SAAKC,KAAL;AAEA,SAAKC,OAAL;AAEA,UAAMC,WAAW,GAAI;uBACDd,IAAI,CAACC,SAAL,CAAeS,IAAf,CAAsB;;KAD1C;AAKAA,IAAAA,IAAI,GAAG,CAAExB,OAAF,EAAW4B,WAAX,EAAyBxB,IAAzB,CAA8B,IAA9B,CAAP;AAEA,SAAKkB,MAAL,CAAYX,OAAZ,CAAoBa,IAApB,EAA2BK,MAAD,IAAY;AACpCX,MAAAA,OAAO,CAACY,IAAR,CAAa;AAAEpB,QAAAA,IAAI,EAAE,QAAR;AAAkBmB,QAAAA;AAAlB,OAAb;AACD,KAFD;AAGD;;AAEDH,EAAAA,KAAK,GAAG;AACN,QAAI,CAAC,KAAKJ,MAAL,CAAYS,WAAjB,EAA8B;AAC5B,WAAKT,MAAL,CAAYU,UAAZ;AACA,WAAKV,MAAL,CAAYS,WAAZ,GAA0B,IAA1B;AACD;AACF;;AAEDJ,EAAAA,OAAO,GAAG;AACR,QAAI,KAAKM,SAAT,EAAoB;AAClB;AACD;;AAED,SAAKX,MAAL,CAAYK,OAAZ;AACA,SAAKM,SAAL,GAAiB,IAAjB;AACD;;AAEDhB,EAAAA,UAAU,GAAG;AACX,QAAI,CAAC,KAAKgB,SAAV,EAAqB;AACnB;AACD;;AAED,SAAKX,MAAL,CAAYL,UAAZ;AACA,SAAKgB,SAAL,GAAiB,KAAjB;AACD;;AAEDrB,EAAAA,QAAQ,CAACC,EAAD,EAAKJ,OAAL,EAAc;AACpB,SAAKa,MAAL,CAAYV,QAAZ,CAAqBC,EAArB,EAAyBJ,OAAzB;AACD;;AAjDyB;;;AA+D5B,MAAMW,MAAM,GAAG,IAAIb,MAAJ,EAAf;AAEAW,OAAO,CAACgB,EAAR,CAAW,SAAX,EAAsBd,MAAM,CAACC,aAA7B","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nconst NativeSandbox = require('bindings')('sandbox').Sandbox;\n\nconst RUNTIME = fs.readFileSync(path.join(__dirname, 'runtime.js')).toString();\n// const LINECOUNT = RUNTIME.split('\\n').length;\n\nexport default class Worker {\n  constructor() {\n    this.native = new NativeSandbox(process.argv[2]);\n  }\n\n  execute({ code, template }) {\n    this.reset();\n      \n    this.connect();\n\n    const wrappedCode = `\n      global._code = ${ JSON.stringify(code) };\n      global._execute();\n    `;\n\n    code = [ RUNTIME, wrappedCode ].join('\\n');\n\n    this.native.execute(code, (result) => {\n      process.send({ type: 'result', result });\n    });\n  }\n\n  reset() {\n    if (!this.native.initialized) {\n      this.native.initialize();\n      this.native.initialized = true;\n    }\n  }\n\n  connect() {\n    if (this.connected) {\n      return;\n    }\n\n    this.native.connect();\n    this.connected = true;\n  }\n\n  disconnect() {\n    if (!this.connected) {\n      return;\n    }\n\n    this.native.disconnect();\n    this.connected = false;\n  }\n\n  callback(id, message) {\n    this.native.callback(id, message);\n  }\n\n  handleMessage = (message) => {\n    if (message.type === 'execute') {\n      this.execute(message);\n    } else if (message.type === 'callback') {\n      this.callback(message.id, JSON.stringify(message.args));\n    } else if (message.type === 'exit') {\n      this.disconnect();\n      process.off('message', worker.handleMessage);\n    }\n  }\n}\n\nconst worker = new Worker();\n\nprocess.on('message', worker.handleMessage);"],"file":"worker.js"}