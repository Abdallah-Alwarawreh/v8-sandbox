{"version":3,"sources":["../../lib/cluster/cluster.js"],"names":["TimeoutError","Error","isTimeout","remove","array","object","index","indexOf","splice","Cluster","constructor","workers","require","template","task","callback","_execute","_workerCount","Math","max","os","cpus","length","_require","_template","_workers","start","_inactiveWorkers","_activeWorkers","_queue","async","queue","worker","ensureWorkers","shutdown","clearWorkerTimeout","removeAllListeners","kill","number","newWorker","forkWorker","send","initialize","push","path","join","__dirname","popWorker","setImmediate","shift","clearTimeout","executionTimeout","finishWorker","removeWorker","execute","code","context","timeout","item","Promise","resolve","reject","on","message","error","setTimeout","JSON","stringify"],"mappings":"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","sourcesContent":["import { fork } from 'child_process';\nimport path from 'path';\nimport async from 'async';\nimport os from 'os';\n\nclass TimeoutError extends Error {\n  get isTimeout() {\n    return true;\n  }\n}\n\nfunction remove(array, object) {\n  const index = array.indexOf(object);\n\n  if (index > -1) {\n    array.splice(index, 1);\n  }\n}\n\nexport default class Cluster {\n  constructor({ workers, require, template } = {}) {\n    this._workerCount = workers || Math.max(os.cpus().length, 4);\n    this._require = require;\n    this._template = template;\n    this._workers = {};\n    this.start();\n  }\n\n  start() {\n    this._inactiveWorkers = [];\n    this._activeWorkers = [];\n    this._queue = async.queue(this.worker, this._workerCount);\n    this.ensureWorkers();\n  }\n\n  shutdown() {\n    for (const worker of this._inactiveWorkers) {\n      this.clearWorkerTimeout(worker);\n      worker.removeAllListeners();\n      worker.kill();\n    }\n\n    for (const worker of this._activeWorkers) {\n      this.clearWorkerTimeout(worker);\n      worker.removeAllListeners();\n      worker.kill();\n    }\n\n    this._inactiveWorkers = [];\n    this._activeWorkers = [];\n    this._workers = {};\n\n    if (this._queue) {\n      this._queue.kill();\n    }\n\n    this._queue = async.queue(this.worker, this._workerCount);\n  }\n\n  worker = (task, callback) => {\n    this._execute(task, callback);\n  }\n\n  ensureWorkers() {\n    for (let number = 0; number < this._workerCount; ++number) {\n      const worker = this._workers[number];\n\n      if (!worker) {\n        const newWorker = this.forkWorker(number);\n\n        // console.log('forking', number, newWorker.pid);\n\n        newWorker.send({ initialize: true,\n                         require: this._require,\n                         template: this._template });\n  \n        this._workers[number] = newWorker;\n\n        this._inactiveWorkers.push(newWorker);\n      }\n    }\n  }\n\n  forkWorker(number) {\n    const worker = fork(path.join(__dirname, 'worker'), [ number ]);\n\n    worker.number = number;\n\n    return worker;\n  }\n\n  popWorker(callback) {\n    this.ensureWorkers();\n\n    if (this._inactiveWorkers.length === 0) {\n      setImmediate(() => {\n        this.popWorker(callback);\n      });\n\n      return;\n    }\n\n    const worker = this._inactiveWorkers.shift();\n\n    this._activeWorkers.push(worker);\n\n    if (this._activeWorkers.length + this._inactiveWorkers.length !== this._workerCount) {\n      throw new Error('invalid worker count',\n        'active:', this._activeWorkers.length,\n        'inactive:', this._inactiveWorkers.length);\n    }\n\n    callback(worker);\n  }\n\n  clearWorkerTimeout(worker) {\n    clearTimeout(worker.executionTimeout);\n    worker.executionTimeout = null;\n  }\n\n  finishWorker(worker) {\n    this.clearWorkerTimeout(worker);\n    remove(this._activeWorkers, worker);\n    this._inactiveWorkers.push(worker);\n  }\n\n  removeWorker(worker) {\n    // console.log('removing worker', worker.number, worker.pid);\n    this.clearWorkerTimeout(worker);\n    worker.kill();\n    worker.removeAllListeners();\n    remove(this._activeWorkers, worker);\n    remove(this._inactiveWorkers, worker);\n\n    delete this._workers[worker.number];\n\n    this.ensureWorkers();\n  }\n\n  execute({ code, context, timeout }) {\n    const item = {\n      code, timeout, context\n    };\n\n    return new Promise((resolve, reject) => {\n      this._queue.push(item, resolve);\n    });\n  }\n\n  _execute({ code, context, timeout }, callback) {\n    this.popWorker((worker) => {\n      worker.removeAllListeners();\n\n      worker.on('message', (message) => {\n        this.finishWorker(worker);\n\n        callback(message);\n      });\n\n      worker.on('error', (message) => {\n        this.removeWorker(worker);\n\n        callback({error: new Error('worker error')});\n      });\n\n      worker.on('disconnect', () => {\n        this.removeWorker(worker);\n\n        callback({error: new Error('worker disconnected')});\n      });\n\n      worker.on('exit', (message) => {\n        this.removeWorker(worker);\n      });\n\n      if (timeout > 0) {\n        worker.executionTimeout = setTimeout(() => {\n          // worker.kill();\n          this.removeWorker(worker);\n          callback({error: new TimeoutError('timeout')});\n        }, timeout);\n      }\n\n      worker.send({ code, context: JSON.stringify(context || {}) });\n    });\n  }\n}"],"file":"cluster.js"}