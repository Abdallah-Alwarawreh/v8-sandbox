{"version":3,"sources":["../lib/index.js"],"names":["NativeSandbox","require","Sandbox","nextObjectID","constructor","_native","id","run","code","callback","err","res","JSON","parse","dispatch","bind","invocation","finish","results","serialized","message","length","push","apply","stringify","parameters","args","name","httpRequest","options"],"mappings":";;;;;;;AAEA;;;;;;AAFA,MAAMA,gBAAgBC,QAAQ,UAAR,EAAoB,SAApB,EAA+BC,OAArD;;AAIA,IAAIC,eAAe,CAAnB;;AAEO,MAAMD,OAAN,CAAc;AACnBE,gBAAc;AACZ,SAAKC,OAAL,GAAe,IAAIL,aAAJ,EAAf;AACA,SAAKM,EAAL,GAAU,EAAEH,YAAZ;AACD;;AAED,SAAOI,GAAP,CAAWC,IAAX,EAAiBC,QAAjB,EAA2B;AACzB,QAAIP,OAAJ,GAAcK,GAAd,CAAkBC,IAAlB,EAAwBC,QAAxB;AACD;;AAEDF,MAAIC,IAAJ,EAAUC,QAAV,EAAoB;AAClB,WAAO,KAAKJ,OAAL,CAAaE,GAAb,CAAiBC,IAAjB,EAAuB,CAACE,GAAD,EAAMC,GAAN,KAAc;AAC1CF,eAASC,GAAT,EAAcE,KAAKC,KAAL,CAAWF,GAAX,CAAd;AACD,KAFM,EAEJ,KAAKG,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAFI,CAAP;AAGD;;AAED;AACAD,WAASE,UAAT,EAAqB;AACnB,UAAMC,SAAS,SAATA,MAAS,CAACP,GAAD,EAAqB;AAAA,wCAAZQ,OAAY;AAAZA,eAAY;AAAA;;AAClC,YAAMC,aAAa,CACjBT,OAAO,IAAP,GAAc,EAACU,SAASV,IAAIU,OAAd,EAAd,GAAuC,IADtB,CAAnB;;AAIA,UAAIF,WAAWA,QAAQG,MAAvB,EAA+B;AAC7BF,mBAAWG,IAAX,CAAgBC,KAAhB,CAAsBJ,UAAtB,EAAkCD,OAAlC;AACD;;AAEDF,iBAAWP,QAAX,CAAoBO,UAApB,EAAgCJ,KAAKY,SAAL,CAAeL,UAAf,CAAhC;AACD,KAVD;;AAYA,UAAMM,aAAab,KAAKC,KAAL,CAAWG,WAAWU,IAAtB,CAAnB;;AAEA;;AAEA,QAAIV,WAAWW,IAAX,KAAoB,aAAxB,EAAuC;AACrC,aAAO,KAAKC,WAAL,CAAiB,GAAGH,UAApB,EAAgCR,MAAhC,CAAP;AACD;;AAED,WAAOA,OAAO,IAAP,CAAP;AACD;;AAEDW,cAAYC,OAAZ,EAAqBpB,QAArB,EAA+B;AAC7B,2BAAQoB,OAAR,EAAiBpB,QAAjB;AACD;AA3CkB;QAARP,O,GAAAA,O","file":"index.js","sourcesContent":["const NativeSandbox = require('bindings')('sandbox').Sandbox;\n\nimport request from 'request';\n\nlet nextObjectID = 0;\n\nexport class Sandbox {\n  constructor() {\n    this._native = new NativeSandbox();\n    this.id = ++nextObjectID;\n  }\n\n  static run(code, callback) {\n    new Sandbox().run(code, callback);\n  }\n\n  run(code, callback) {\n    return this._native.run(code, (err, res) => {\n      callback(err, JSON.parse(res));\n    }, this.dispatch.bind(this));\n  }\n\n  // handle function calls from the sandbox\n  dispatch(invocation) {\n    const finish = (err, ...results) => {\n      const serialized = [\n        err != null ? {message: err.message} : null\n      ];\n\n      if (results && results.length) {\n        serialized.push.apply(serialized, results);\n      }\n\n      invocation.callback(invocation, JSON.stringify(serialized));\n    };\n\n    const parameters = JSON.parse(invocation.args);\n\n    // console.log(invocation.name + '(' + JSON.stringify(parameters) + ')');\n\n    if (invocation.name === 'httpRequest') {\n      return this.httpRequest(...parameters, finish);\n    }\n\n    return finish(null);\n  }\n\n  httpRequest(options, callback) {\n    request(options, callback);\n  }\n}\n"]}