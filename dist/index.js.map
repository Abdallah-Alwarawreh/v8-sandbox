{"version":3,"sources":["../lib/index.js"],"names":["TimeoutError","Error","isTimeout","remove","array","object","index","indexOf","splice","Sandbox","constructor","options","_workerCount","workers","start","_inactiveWorkers","_activeWorkers","ensureWorkers","shutdown","worker","removeAllListeners","kill","total","length","i","push","forkWorker","join","__dirname","popWorker","callback","setTimeout","shift","finishWorker","clearTimeout","executionTimeout","removeWorker","execute","code","timeout","Promise","resolve","reject","_execute","err","value","on","message","send"],"mappings":"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","file":"index.js","sourcesContent":["import {fork} from 'child_process';\nimport path from 'path';\n\nclass TimeoutError extends Error {\n  get isTimeout() {\n    return true;\n  }\n}\n\nfunction remove(array, object) {\n  const index = array.indexOf(object);\n\n  if (index > -1) {\n    array.splice(index, 1);\n  }\n}\n\nexport default class Sandbox {\n  constructor(options = {}) {\n    this._workerCount = options.workers || 4;\n    this.start();\n  }\n\n  start() {\n    this._inactiveWorkers = [];\n    this._activeWorkers = [];\n    this.ensureWorkers();\n  }\n\n  shutdown() {\n    for (const worker of this._inactiveWorkers) {\n      worker.removeAllListeners();\n      worker.kill();\n    }\n    for (const worker of this._activeWorkers) {\n      worker.removeAllListeners();\n      worker.kill();\n    }\n    this._inactiveWorkers = [];\n    this._activeWorkers = [];\n  }\n\n  ensureWorkers() {\n    const total = this._inactiveWorkers.length + this._activeWorkers;\n\n    for (let i = 0; i < this._workerCount - total; ++i) {\n      this._inactiveWorkers.push(this.forkWorker());\n    }\n  }\n\n  forkWorker() {\n    return fork(path.join(__dirname, 'worker'));\n  }\n\n  popWorker(callback) {\n    this.ensureWorkers();\n\n    if (this._inactiveWorkers.length === 0) {\n      setTimeout(() => {\n        this.popWorker(callback);\n      }, 1);\n\n      return;\n    }\n\n    const worker = this._inactiveWorkers.shift();\n    this._activeWorkers.push(worker);\n\n    if (this._activeWorkers.length + this._inactiveWorkers.length !== this._workerCount) {\n      throw new Error('invalid worker count');\n    }\n\n    callback(worker);\n  }\n\n  finishWorker(worker) {\n    clearTimeout(worker.executionTimeout);\n    worker.executionTimeout = null;\n    remove(this._activeWorkers, worker);\n    this._inactiveWorkers.push(worker);\n  }\n\n  removeWorker(worker) {\n    clearTimeout(worker.executionTimeout);\n    worker.executionTimeout = null;\n    remove(this._activeWorkers, worker);\n    remove(this._inactiveWorkers, worker);\n    this.ensureWorkers();\n  }\n\n  execute(code, timeout, callback) {\n    if (callback == null) {\n      return new Promise((resolve, reject) => {\n        this._execute(code, timeout, (err, value) => {\n          if (err) {\n            return reject(err);\n          }\n\n          return resolve(value);\n        });\n      });\n    }\n\n    return this._execute(code, timeout, callback);\n  }\n\n  _execute(code, timeout, callback) {\n    this.popWorker((worker) => {\n      worker.removeAllListeners();\n\n      worker.on('message', (message) => {\n        this.finishWorker(worker);\n        callback(message.err, message.value);\n      });\n\n      worker.on('error', (message) => {\n        this.removeWorker(worker);\n      });\n\n      worker.on('disconnect', () => {\n        this.removeWorker(worker);\n      });\n\n      worker.on('exit', (message) => {\n        this.removeWorker(worker);\n      });\n\n      if (timeout > 0) {\n        worker.executionTimeout = setTimeout(() => {\n          this.removeWorker(worker);\n          worker.kill();\n          callback(new TimeoutError('timeout'));\n        }, timeout);\n      }\n\n      worker.send({code});\n    });\n  }\n}\n"]}