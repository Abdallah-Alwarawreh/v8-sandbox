{"version":3,"sources":["../lib/runtime.js"],"names":["global","_tryCallback","func","ex","setResult","error","name","message","stack","httpRequest","options","callback","parameters","JSON","stringify","wrappedCallback","args","apply","parse","push","result","_httpRequest","_setResult","setTimeout","timeout","handler","_setTimeout","clearTimeout","id","_clearTimeout","console","log","_log","_error"],"mappings":";;AACAA,OAAOC,YAAP,GAAuBC,IAAD,IAAU;AAC9B,MAAI;AACFA;AACD,GAFD,CAEE,OAAOC,EAAP,EAAW;AACXH,WAAOI,SAAP,CAAiB;AACfC,aAAO;AACLC,cAAMH,GAAGG,IADJ;AAELC,iBAASJ,GAAGI,OAFP;AAGLC,eAAOL,GAAGK;AAHL;AADQ,KAAjB;AAOD;AACF,CAZD;;AAcAR,OAAOS,WAAP,GAAqB,CAACC,OAAD,EAAUC,QAAV,KAAuB;AAC1C,QAAMC,aAAa,CAAEC,KAAKC,SAAL,CAAe,CAAEJ,OAAF,CAAf,CAAF,CAAnB;;AAEA,MAAIC,QAAJ,EAAc;AACZ,UAAMI,kBAAmBC,IAAD,IAAU;AAChChB,aAAOC,YAAP,CAAoB,MAAM;AACxBU,iBAASM,KAAT,CAAe,IAAf,EAAqBJ,KAAKK,KAAL,CAAWF,IAAX,CAArB;AACD,OAFD;AAGD,KAJD;;AAMAJ,eAAWO,IAAX,CAAgBJ,eAAhB;AACD;;AAED,QAAMK,SAASpB,OAAOqB,YAAP,CAAoBJ,KAApB,CAA0BjB,MAA1B,EAAkCY,UAAlC,CAAf;;AAEA,SAAOQ,UAAU,IAAV,GAAiBP,KAAKK,KAAL,CAAWE,MAAX,CAAjB,GAAsC,IAA7C;AACD,CAhBD;;AAkBApB,OAAOI,SAAP,GAAoBgB,MAAD,IAAY;AAC7B,SAAOpB,OAAOsB,UAAP,CAAkBF,UAAU,IAAV,GAAiBP,KAAKC,SAAL,CAAeM,MAAf,CAAjB,GAA0C,IAA5D,CAAP;AACD,CAFD;;AAIApB,OAAOuB,UAAP,GAAoB,CAACZ,QAAD,EAAWa,OAAX,KAAuB;AACzC,QAAMC,UAAU,MAAM;AACpBzB,WAAOC,YAAP,CAAoBU,QAApB;AACD,GAFD;;AAIA,SAAOX,OAAO0B,WAAP,CAAmBD,OAAnB,EAA4BD,OAA5B,CAAP;AACD,CAND;;AAQAxB,OAAO2B,YAAP,GAAuBC,EAAD,IAAQ;AAC5B,SAAO5B,OAAO6B,aAAP,CAAqBD,EAArB,CAAP;AACD,CAFD;;AAIA5B,OAAO8B,OAAP,GAAiB;AACfC,OAAK,eAAa;AAAA,sCAATf,IAAS;AAATA,UAAS;AAAA;;AAChBhB,WAAOgC,IAAP,CAAYnB,KAAKC,SAAL,CAAeE,IAAf,CAAZ;AACD,GAHc;AAIfX,SAAO,iBAAa;AAAA,uCAATW,IAAS;AAATA,UAAS;AAAA;;AAClBhB,WAAOiC,MAAP,CAAcpB,KAAKC,SAAL,CAAeE,IAAf,CAAd;AACD;AANc,CAAjB","file":"runtime.js","sourcesContent":["\nglobal._tryCallback = (func) => {\n  try {\n    func();\n  } catch (ex) {\n    global.setResult({\n      error: {\n        name: ex.name,\n        message: ex.message,\n        stack: ex.stack\n      }\n    });\n  }\n};\n\nglobal.httpRequest = (options, callback) => {\n  const parameters = [ JSON.stringify([ options ]) ];\n\n  if (callback) {\n    const wrappedCallback = (args) => {\n      global._tryCallback(() => {\n        callback.apply(null, JSON.parse(args));\n      });\n    };\n\n    parameters.push(wrappedCallback);\n  }\n\n  const result = global._httpRequest.apply(global, parameters);\n\n  return result != null ? JSON.parse(result) : null;\n};\n\nglobal.setResult = (result) => {\n  return global._setResult(result != null ? JSON.stringify(result) : null);\n};\n\nglobal.setTimeout = (callback, timeout) => {\n  const handler = () => {\n    global._tryCallback(callback);\n  };\n\n  return global._setTimeout(handler, timeout);\n};\n\nglobal.clearTimeout = (id) => {\n  return global._clearTimeout(id);\n};\n\nglobal.console = {\n  log: (...args) => {\n    global._log(JSON.stringify(args));\n  },\n  error: (...args) => {\n    global._error(JSON.stringify(args));\n  }\n};\n"]}