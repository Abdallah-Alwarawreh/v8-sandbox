{"version":3,"sources":["../lib/sandbox.js"],"names":["NativeSandbox","require","Sandbox","nextObjectID","tryParseJSON","value","JSON","parse","ex","constructor","_native","id","initialize","Promise","resolve","setImmediate","dispatch","bind","eval","code","result","execute","finalize","callback","reject","json","error","Error","invocation","finish","err","results","serialized","message","length","push","apply","stringify","parameters","args","name","dispatchSync","dispatchAsync","httpRequest","log","console","options","response","body","Buffer","isBuffer","toString","slice","global","$exports"],"mappings":"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","sourcesContent":["const NativeSandbox = require('bindings')('sandbox').Sandbox;\n\nimport request from 'request';\n\nlet nextObjectID = 0;\n\nfunction tryParseJSON(value) {\n  try {\n    return JSON.parse(value);\n  } catch (ex) {\n    return null;\n  }\n}\n\nexport default class Sandbox {\n  constructor() {\n    this._native = new NativeSandbox();\n    this.id = ++nextObjectID;\n  }\n\n  initialize() {\n    return new Promise((resolve) => {\n      this._native.initialize(() => {\n        setImmediate(resolve);\n      }, this.dispatch.bind(this));\n    });\n  }\n\n  async eval(code) {\n    await this.initialize();\n\n    const result = await this.execute(code);\n\n    await this.finalize();\n\n    return result;\n  }\n\n  execute(code, callback) {\n    return new Promise((resolve, reject) => {\n      this._native.execute(code, (json) => {\n        let result = tryParseJSON(json);\n\n        if (result == null) {\n          result = { error: new Error('no result') };\n        }\n\n        setImmediate(() => {\n          resolve(result);\n        });\n      }, this.dispatch.bind(this));\n    });\n  }\n\n  finalize() {\n    return new Promise((resolve) => {\n      this._native.finalize(() => {\n        setImmediate(resolve);\n      }, this.dispatch.bind(this));\n    });\n  }\n\n  // handle function calls from the sandbox\n  dispatch(invocation) {\n    const finish = (err, ...results) => {\n      const serialized = [\n        err != null ? {message: err.message} : null\n      ];\n\n      if (results && results.length) {\n        serialized.push.apply(serialized, results);\n      }\n\n      invocation.callback(invocation, JSON.stringify(serialized));\n    };\n\n    const parameters = tryParseJSON(invocation.args);\n\n    if (parameters == null) {\n      return finish(new Error('invalid invocation parameters'));\n    }\n\n    if (invocation.name === 'dispatchSync') {\n      return this.dispatchSync(parameters, finish);\n    } else if (invocation.name === 'dispatchAsync') {\n      return this.dispatchAsync(parameters, finish);\n    } else if (invocation.name === 'httpRequest') {\n      return this.httpRequest(...parameters, finish);\n    } else if (invocation.name === 'log') {\n      this.log(...parameters);\n      return finish(null);\n    } else if (invocation.name === 'error') {\n      this.error(...parameters);\n      return finish(null);\n    }\n\n    return finish(null);\n  }\n\n  log(...args) {\n    console.log(...args);\n  }\n\n  error(...args) {\n    console.error(...args);\n  }\n\n  httpRequest(options, callback) {\n    request(options, (err, response, body) => {\n      if (response && Buffer.isBuffer(response.body)) {\n        response.body = body = response.body.toString('base64');\n      }\n\n      callback(err, response, body);\n    });\n  }\n\n  dispatchSync(args, callback) {\n    try {\n      const name = args[0];\n      const parameters = args.slice(1);\n\n      callback(null, global.$exports[name](...parameters));\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n  dispatchAsync(args, callback) {\n    try {\n      const name = args[0];\n      const parameters = args.slice(1);\n\n      global.$exports[name](...[ ...parameters, callback ]);\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\n"],"file":"sandbox.js"}