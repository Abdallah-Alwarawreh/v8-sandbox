{"version":3,"sources":["../lib/sandbox.js"],"names":["Socket","constructor","socket","sandbox","console","log","data","toString","message","JSON","parse","callback","args","worker","send","type","id","respond","result","json","stringify","length","Buffer","byteLength","buffer","alloc","writeInt32LE","write","dispatch","error","resume","on","handleClose","handleData","handleError","handleDrain","handleTimeout","handleEnd","Sandbox","socketName","server","net","createServer","handleConnection","handleListening","listen","forkWorker","path","join","__dirname","process","platform","cwd","execute","code","context","timeout","removeAllListeners","_callback","Error","pid","exitCode","close","name","value","setResult","timerID","setTimeout"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { fork } from 'child_process';\nimport net from 'net';\nimport { v4 as uuid } from 'uuid';\n\nclass Socket {\n  constructor(socket, sandbox) {\n    this.sandbox = sandbox;\n    this.socket = socket;\n    this.socket.on('close', this.handleClose);\n    this.socket.on('data', this.handleData);\n    this.socket.on('error', this.handleError);\n    this.socket.on('drain', this.handleDrain);\n    this.socket.on('timeout', this.handleTimeout);\n    this.socket.on('end', this.handleEnd);\n  }\n\n  handleClose = () => {\n    console.log('socket closed');\n  }\n\n  handleData = (data) => {\n    console.log('socket data', data.toString());\n\n    const message = JSON.parse(data);\n\n    const callback = (...args) => {\n      this.sandbox.worker.send({ type: 'callback', id: message.id, args });\n    };\n\n    const respond = (result) => {\n      const json = JSON.stringify({ id: message.id, result });\n      const length = Buffer.byteLength(json, 'utf8');\n      const buffer = Buffer.alloc(length + 4);\n  \n      buffer.writeInt32LE(length);\n      buffer.write(json, 4);\n  \n      this.socket.write(buffer);\n    }\n\n    this.sandbox.dispatch(message, respond, callback);\n  }\n\n  handleError = (error) => {\n    console.log('socket error', error);\n  }\n\n  handleTimeout = () => {\n    console.log('socket timeout');\n  }\n\n  handleDrain = () => {\n    console.log('socket drain');\n    this.socket.resume();\n  }\n\n  handleEnd = () => {\n    console.log('socket end');\n  }\n}\n\nexport default class Sandbox {\n  constructor() {\n    this.id = uuid();\n\n    this.server = net.createServer();\n\n    this.server.on('close', this.handleClose);\n    this.server.on('connection', this.handleConnection);\n    this.server.on('error', this.handleError);\n    this.server.on('listening', this.handleListening);\n\n    this.server.listen(this.socketName);\n\n    this.worker = this.forkWorker();\n  }\n\n  forkWorker() {\n    return fork(path.join(__dirname, 'worker'), [ this.socketName ]);\n  }\n\n  get socketName() {\n    return process.platform === 'win32' ? path.join('\\\\\\\\?\\\\pipe', process.cwd(), this.id)\n                                        : `/tmp/${ this.id }`;\n  }\n\n  handleClose = () => {\n    console.log('server closed');\n  }\n\n  handleConnection = (socket) => {\n    console.log('server connection');\n    this.socket = new Socket(socket, this);\n  }\n\n  handleError = (error) => {\n    console.log('server error', error);\n  }\n\n  handleListening = () => {\n    console.log('server listening', this.socketName);\n  }\n\n  execute({code, context, timeout}, callback) {\n    this.worker.removeAllListeners();\n\n    this._callback = callback;\n\n    this.worker.on('message', (message) => {\n      // this.finishWorker(worker);\n\n      console.log('worker:onmessage')    \n    });\n\n    this.worker.on('error', (message) => {\n      // this.removeWorker(worker);\n\n      console.log('worker:error')\n\n      callback({error: new Error('worker error')});\n    });\n\n    this.worker.on('disconnect', () => {\n      // this.removeWorker(worker);\n\n      console.log('worker:disconnect', this.worker.pid)\n\n      // if (this.worker.exitedAfterDisconnect === true) {\n      //   console.log('Oh, it was just voluntary â€“ no need to worry');\n      // }\n\n      // callback({error: new Error('worker disconnected')});\n    });\n\n    this.worker.on('exit', (message) => {\n      console.log('worker:exit', this.worker.exitCode);\n      // this.worker.kill();\n      // this.removeWorker(worker);\n      this.server.close(() => {\n        console.log('server closed');\n      })\n    });\n\n    // if (timeout > 0) {\n    //   worker.executionTimeout = setTimeout(() => {\n    //     this.removeWorker(worker);\n    //     worker.kill();\n    //     callback({error: new TimeoutError('timeout')});\n    //   }, timeout);\n    // }\n\n    this.worker.send({type: 'execute', code, context: JSON.stringify(context || {})});\n  }\n\n  dispatch({ name, args }, respond, callback) {\n    // console.log('MESSAGE', message);\n\n    if (name === 'setResult') {\n      respond({ value: this.setResult(...args) });\n    } if (name === 'test') {\n      respond({ value: args });\n    } else if (name === 'testAsync') {\n      const timerID = setTimeout(() => {\n        console.log('calling!!!!!!!');\n        callback(null, 7171717);\n      });\n\n      respond({ value: +timerID });\n    }\n  }\n\n  setResult(result) {\n    console.log('reseres')\n    console.log('sendingkill')\n    this.worker.send({ type: 'exit' });\n    this._callback(result);\n   \n    console.log('reseresyoyoy')\n    // this._callback(result);\n  }\n}"],"file":"sandbox.js"}