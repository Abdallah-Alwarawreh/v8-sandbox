{"version":3,"sources":["../../lib/server/host.js"],"names":["Host","EventEmitter","constructor","socketName","fork","kill","worker","path","join","__dirname","on","error","emit","clearTimeout","removeAllListeners","timer","execute","code","context","timeout","setTimeout","send","type","JSON","stringify","callback","id","args"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEe,MAAMA,IAAN,SAAmBC,eAAnB,CAAgC;AAC7CC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACtB;AAEA,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,IAAL;AACD;;AAEDA,EAAAA,IAAI,GAAG;AACL,SAAKC,IAAL;AAEA,SAAKC,MAAL,GAAc,yBAAKC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,QAA3B,EAAqC,QAArC,CAAL,EAAqD,CAAE,KAAKN,UAAP,CAArD,CAAd;AAEA,SAAKG,MAAL,CAAYI,EAAZ,CAAe,OAAf,EAAyBC,KAAD,IAAW;AACjC,WAAKP,IAAL;AACA,WAAKQ,IAAL,CAAU,OAAV,EAAmBD,KAAnB;AACD,KAHD;AAKA,SAAKL,MAAL,CAAYI,EAAZ,CAAe,MAAf,EAAuB,MAAM;AAC3B,WAAKE,IAAL,CAAU,MAAV;AACD,KAFD;AAGD;;AAEDP,EAAAA,IAAI,GAAG;AACL,SAAKQ,YAAL;;AAEA,QAAI,KAAKP,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYQ,kBAAZ;AACA,WAAKR,MAAL,CAAYD,IAAZ;AACA,WAAKC,MAAL,GAAc,IAAd;AACD;AACF;;AAEDO,EAAAA,YAAY,GAAG;AACb,QAAI,KAAKE,KAAT,EAAgB;AACdF,MAAAA,YAAY,CAAC,KAAKE,KAAN,CAAZ;AACA,WAAKA,KAAL,GAAa,IAAb;AACD;AACF;;AAEDC,EAAAA,OAAO,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAAD,EAA6B;AAClC,QAAIA,OAAO,GAAG,CAAd,EAAiB;AACf,WAAKN,YAAL;AAEA,WAAKE,KAAL,GAAaK,UAAU,CAAC,MAAM;AAC5B,aAAKhB,IAAL;AACA,aAAKQ,IAAL,CAAU,SAAV;AACD,OAHsB,EAGpBO,OAHoB,CAAvB;AAID;;AAED,SAAKb,MAAL,CAAYe,IAAZ,CAAiB;AAAEC,MAAAA,IAAI,EAAE,SAAR;AAAmBL,MAAAA,IAAnB;AAAyBC,MAAAA,OAAO,EAAEK,IAAI,CAACC,SAAL,CAAeN,OAAf;AAAlC,KAAjB;AACD;;AAEDO,EAAAA,QAAQ,CAACC,EAAD,EAAKC,IAAL,EAAW;AACjB,SAAKrB,MAAL,CAAYe,IAAZ,CAAiB;AAAEC,MAAAA,IAAI,EAAE,UAAR;AAAoBI,MAAAA,EAApB;AAAwBC,MAAAA;AAAxB,KAAjB;AACD;;AAvD4C","sourcesContent":["import path from 'path';\nimport { fork } from 'child_process';\nimport EventEmitter from 'events';\n\nexport default class Host extends EventEmitter {\n  constructor(socketName) {\n    super();\n\n    this.socketName = socketName;\n    this.fork();\n  }\n\n  fork() {\n    this.kill();\n\n    this.worker = fork(path.join(__dirname, '..', 'client', 'worker'), [ this.socketName ]);\n\n    this.worker.on('error', (error) => {\n      this.fork();\n      this.emit('error', error);\n    });\n\n    this.worker.on('exit', () => {\n      this.emit('exit');\n    });\n  }\n\n  kill() {\n    this.clearTimeout();\n\n    if (this.worker) {\n      this.worker.removeAllListeners();\n      this.worker.kill();\n      this.worker = null;\n    }\n  }\n\n  clearTimeout() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n  }\n\n  execute({ code, context, timeout }) {\n    if (timeout > 0) {\n      this.clearTimeout();\n\n      this.timer = setTimeout(() => {\n        this.fork();\n        this.emit('timeout');\n      }, timeout);\n    }\n\n    this.worker.send({ type: 'execute', code, context: JSON.stringify(context) });\n  }\n\n  callback(id, args) {\n    this.worker.send({ type: 'callback', id, args });\n  }\n}"],"file":"host.js"}