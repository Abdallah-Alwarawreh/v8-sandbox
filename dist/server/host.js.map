{"version":3,"sources":["../../lib/server/host.js"],"names":["Host","EventEmitter","constructor","socketName","fork","emit","initializeTimeout","Timer","executeTimeout","kill","worker","path","join","__dirname","console","log","pid","on","error","clear","removeAllListeners","process","item","type","initialize","execute","Error","template","timeout","start","handleTimeout","send","code","context","JSON","stringify","callback","id","args"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEe,MAAMA,IAAN,SAAmBC,eAAnB,CAAgC;AAC7CC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACtB;;AADsB,2CAyCR,MAAM;AACpB,WAAKC,IAAL;AACA,WAAKC,IAAL,CAAU,SAAV;AACD,KA5CuB;;AAGtB,SAAKF,UAAL,GAAkBA,UAAlB;AAEA,SAAKG,iBAAL,GAAyB,IAAIC,cAAJ,EAAzB;AACA,SAAKC,cAAL,GAAsB,IAAID,cAAJ,EAAtB;AAEA,SAAKH,IAAL;AACD;;AAEDA,EAAAA,IAAI,GAAG;AACL,SAAKK,IAAL;AAEA,SAAKC,MAAL,GAAc,yBAAKC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,QAA3B,EAAqC,QAArC,CAAL,EAAqD,CAAE,KAAKV,UAAP,CAArD,CAAd;AAEAW,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKL,MAAL,CAAYM,GAAtC;AAEA,SAAKN,MAAL,CAAYO,EAAZ,CAAe,OAAf,EAAyBC,KAAD,IAAW;AACjC,WAAKd,IAAL;AACA,WAAKC,IAAL,CAAU,OAAV,EAAmBa,KAAnB;AACD,KAHD;AAKA,SAAKR,MAAL,CAAYO,EAAZ,CAAe,MAAf,EAAuB,MAAM;AAC3B,WAAKZ,IAAL,CAAU,MAAV;AACD,KAFD;AAGD;;AAEDI,EAAAA,IAAI,GAAG;AACL,SAAKH,iBAAL,CAAuBa,KAAvB;AACA,SAAKX,cAAL,CAAoBW,KAApB;;AAEA,QAAI,KAAKT,MAAT,EAAiB;AACfI,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKL,MAAL,CAAYM,GAAtC;AAEA,WAAKN,MAAL,CAAYU,kBAAZ;AACA,WAAKV,MAAL,CAAYD,IAAZ;AACA,WAAKC,MAAL,GAAc,IAAd;AACD;AACF;;AAODW,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,YAAQA,IAAI,CAACC,IAAb;AACE,WAAK,YAAL;AACE,eAAO,KAAKC,UAAL,CAAgBF,IAAhB,CAAP;;AACF,WAAK,SAAL;AACE,eAAO,KAAKG,OAAL,CAAaH,IAAb,CAAP;;AACF;AACE,cAAM,IAAII,KAAJ,CAAU,cAAV,CAAN;AANJ;AAQD;;AAEDF,EAAAA,UAAU,CAAC;AAAEG,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,EAAwB;AAChC,SAAKtB,iBAAL,CAAuBuB,KAAvB,CAA6BD,OAA7B,EAAsC,KAAKE,aAA3C;AAEA,SAAKpB,MAAL,CAAYqB,IAAZ,CAAiB;AAAER,MAAAA,IAAI,EAAE,YAAR;AAAsBI,MAAAA,QAAQ,EAAEA,QAAQ,IAAI;AAA5C,KAAjB;AACD;;AAEDF,EAAAA,OAAO,CAAC;AAAEO,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBL,IAAAA;AAAjB,GAAD,EAA6B;AAClC,SAAKpB,cAAL,CAAoBqB,KAApB,CAA0BD,OAA1B,EAAmC,KAAKE,aAAxC;AAEA,SAAKpB,MAAL,CAAYqB,IAAZ,CAAiB;AAAER,MAAAA,IAAI,EAAE,SAAR;AAAmBS,MAAAA,IAAnB;AAAyBC,MAAAA,OAAO,EAAEC,IAAI,CAACC,SAAL,CAAeF,OAAf;AAAlC,KAAjB;AACD;;AAEDG,EAAAA,QAAQ,CAACC,EAAD,EAAKC,IAAL,EAAW;AACjB,SAAK5B,MAAL,CAAYqB,IAAZ,CAAiB;AAAER,MAAAA,IAAI,EAAE,UAAR;AAAoBc,MAAAA,EAApB;AAAwBC,MAAAA;AAAxB,KAAjB;AACD;;AAxE4C","sourcesContent":["import path from 'path';\nimport { fork } from 'child_process';\nimport EventEmitter from 'events';\nimport Timer from './timer';\n\nexport default class Host extends EventEmitter {\n  constructor(socketName) {\n    super();\n\n    this.socketName = socketName;\n\n    this.initializeTimeout = new Timer();\n    this.executeTimeout = new Timer();\n\n    this.fork();\n  }\n\n  fork() {\n    this.kill();\n\n    this.worker = fork(path.join(__dirname, '..', 'client', 'worker'), [ this.socketName ]);\n\n    console.log('forkworker', this.worker.pid);\n    \n    this.worker.on('error', (error) => {\n      this.fork();\n      this.emit('error', error);\n    });\n\n    this.worker.on('exit', () => {\n      this.emit('exit');\n    });\n  }\n\n  kill() {\n    this.initializeTimeout.clear();\n    this.executeTimeout.clear();\n\n    if (this.worker) {\n      console.log('killworker', this.worker.pid);\n\n      this.worker.removeAllListeners();\n      this.worker.kill();\n      this.worker = null;\n    }\n  }\n\n  handleTimeout = () => {\n    this.fork();\n    this.emit('timeout');\n  }\n\n  process(item) {\n    switch (item.type) {\n      case 'initialize':\n        return this.initialize(item);\n      case 'execute':\n        return this.execute(item);\n      default:\n        throw new Error('invalid item');\n    }\n  }\n\n  initialize({ template, timeout }) {\n    this.initializeTimeout.start(timeout, this.handleTimeout);\n    \n    this.worker.send({ type: 'initialize', template: template || '' });\n  }\n\n  execute({ code, context, timeout }) {\n    this.executeTimeout.start(timeout, this.handleTimeout);\n\n    this.worker.send({ type: 'execute', code, context: JSON.stringify(context) });\n  }\n\n  callback(id, args) {\n    this.worker.send({ type: 'callback', id, args });\n  }\n}"],"file":"host.js"}