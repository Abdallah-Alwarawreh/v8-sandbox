{"version":3,"sources":["../../lib/server/sandbox.ts"],"names":["TimeoutError","Error","isTimeout","nextID","Host","constructor","require","template","fork","finish","error","message","timeout","Promise","resolve","callback","result","type","onInitialize","onExecute","socket","Socket","console","id","process","pid","server","net","createServer","on","handleConnection","handleError","cleanupSocket","listen","socketName","queue","async","processMessage","initializeTimeout","Timer","executeTimeout","functions","Functions","initialize","push","defines","join","output","initialized","execute","code","context","platform","path","cwd","dispatch","invocation","fail","respond","kill","worker","__dirname","clear","removeAllListeners","send","fs","unlinkSync","ex","shutdown","clearTimers","close","args","start","handleTimeout","global","JSON","stringify"],"mappings":"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","sourcesContent":["import path from 'path';\nimport net from 'net';\nimport { fork, ChildProcess } from 'child_process';\nimport Timer from './timer';\nimport Socket from './socket';\nimport Functions from './functions';\nimport async from 'async';\nimport { once } from 'lodash';\n\nexport interface Log {\n  type: string;\n  time: Date;\n  message: string;\n}\n\nexport interface Result {\n  value?: any;\n  error?: {\n    name: string;\n    message: string;\n    stack: string;\n  };\n  output?: Log[];\n}\n\nexport interface Message {\n  type: 'initialize' | 'execute';\n  template?: string;\n  code?: string;\n  context?: any;\n  output: Log[];\n  // result: Result;\n  timeout: number;\n  callback: Function;\n}\n\nclass TimeoutError extends Error {\n  get isTimeout() {\n    return true;\n  }\n}\n\nlet nextID = 0;\n\nexport default class Host {\n  id: string;\n\n  template: string;\n\n  initializeTimeout: Timer;\n\n  executeTimeout: Timer;\n\n  server: net.Server;\n\n  worker: ChildProcess;\n\n  initialized: boolean;\n\n  socket: Socket;\n\n  queue: async.AsyncQueue<Message>;\n\n  message: Message;\n\n  functions: Functions;\n\n  constructor({ require, template } = { require: null, template: null }) {\n    this.id = `v8-sandbox-socket-${ process.pid }-${ ++nextID }`;\n\n    this.server = net.createServer();\n    this.server.on('connection', this.handleConnection);\n    this.server.on('error', this.handleError);\n\n    this.cleanupSocket();\n\n    this.server.listen(this.socketName);\n\n    this.queue = async.queue(this.processMessage, 1);\n\n    this.initializeTimeout = new Timer();\n    this.executeTimeout = new Timer();\n\n    this.template = template || '';\n    this.functions = new Functions(this, { require });\n\n    this.fork();\n  }\n\n  initialize({ timeout } = { timeout: null }): Promise<Result> {\n    return new Promise(resolve => {\n      this.queue.push({\n        type: 'initialize',\n        template: [ this.functions.defines().join('\\n'), this.template ].join('\\n'),\n        timeout,\n        output: [],\n        callback: (result: Result) => {\n          this.initialized = true;\n\n          resolve(result);\n        }\n      });\n    });\n  }\n\n  async execute({ code, context, timeout }) {\n    const result = await this.initialize({ timeout });\n\n    if (result.error) {\n      return result;\n    }\n\n    return new Promise(resolve => {\n      this.queue.push({\n        type: 'execute',\n        code,\n        timeout,\n        context: context || {},\n        output: [],\n        callback: resolve\n      });\n    });\n  }\n\n  get socketName() {\n    return process.platform === 'win32' ? path.join('\\\\\\\\?\\\\pipe', process.cwd(), this.id)\n      : `/tmp/${ this.id }`;\n  }\n\n  dispatch(invocation, { fail, respond, callback }) {\n    this.functions.dispatch(invocation, { message: this.message, fail, respond, callback });\n  }\n\n  fork() {\n    this.kill();\n\n    this.worker = fork(path.join(__dirname, '..', 'client', 'worker'), [ this.socketName ]);\n\n    this.worker.on('error', (error) => {\n      this.fork();\n      this.finish({ error });\n    });\n  }\n\n  kill() {\n    this.initializeTimeout.clear();\n    this.executeTimeout.clear();\n\n    if (this.worker) {\n      this.worker.removeAllListeners();\n      this.worker.send({ type: 'exit' });\n      this.worker.kill();\n      this.worker = null;\n      this.initialized = false;\n    }\n  }\n\n  cleanupSocket() {\n    try {\n      fs.unlinkSync(this.socketName);\n    } catch (ex) {\n      // silent\n    }\n  }\n\n  shutdown(callback) {\n    this.functions.clearTimers();\n\n    this.kill();\n\n    if (this.socket) {\n      this.socket.shutdown();\n    }\n\n    this.server.close(() => {\n      this.cleanupSocket();\n\n      if (callback) {\n        callback();\n      }\n    });\n  }\n\n  handleTimeout = () => {\n    this.fork();\n    this.finish({ error: new TimeoutError(`timeout: ${this.message.timeout }ms`) });\n  };\n\n  callback(id, args) {\n    this.worker.send({ type: 'callback', id, args });\n  }\n\n  processMessage = async (message: Message) => {\n    this.message = message;\n\n    return new Promise(resolve => {\n      const { callback } = this.message;\n\n      this.message.callback = once((result) => {\n        callback(result);\n        resolve();\n      });\n\n      switch (message.type) {\n        case 'initialize':\n          return this.onInitialize(message);\n        case 'execute':\n          return this.onExecute(message);\n        default:\n          this.finish({ error: new Error('invalid message') });\n      }\n    });\n  };\n\n  onInitialize({ template, timeout }: Message) {\n    if (this.initialized) {\n      return this.finish({});\n    }\n\n    this.initializeTimeout.start(timeout, this.handleTimeout);\n\n    this.worker.send({ type: 'initialize', template });\n  }\n\n  onExecute({ code, context, timeout }: Message) {\n    this.executeTimeout.start(timeout, this.handleTimeout);\n\n    global.context = context;\n\n    this.worker.send({ type: 'execute', code, context: JSON.stringify(context) });\n  }\n\n  finish(result) {\n    this.functions.clearTimers();\n\n    if (this.message) {\n      this.message.callback({ ...result, output: this.message.output });\n    }\n  }\n\n  handleConnection = (socket) => {\n    this.socket = new Socket(socket, this);\n  };\n\n  handleError = (error) => {\n    console.error('server error', error);\n  };\n}\n"],"file":"sandbox.js"}