{"version":3,"sources":["../../lib/server/sandbox.js"],"names":["TimeoutError","Error","isTimeout","Sandbox","constructor","console","log","socket","Socket","error","socketName","id","server","net","createServer","on","handleClose","handleConnection","handleError","handleListening","listen","forkWorker","queue","clearWorkerTimeout","worker","path","join","__dirname","process","platform","cwd","execute","code","context","timeout","callback","wrappedCallback","args","called","push","executeNext","finishItem","item","length","pop","removeAllListeners","executionTimeout","setTimeout","kill","send","type","JSON","stringify","clearTimeout","shutdown","close","wtfnode","dump","dispatch","name","respond","params","setResult","httpRequest","result","value","timerID","options","sync","err","response","body","Buffer","isBuffer","toString"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { fork } from 'child_process';\nimport net from 'net';\nimport { v4 as uuid } from 'uuid';\nimport request from 'request';\nimport wtfnode from 'wtfnode';\nimport Socket from './socket';\n\nclass TimeoutError extends Error {\n  get isTimeout() {\n    return true;\n  }\n}\n\nexport default class Sandbox {\n  constructor() {\n    this.id = uuid();\n\n    this.server = net.createServer();\n\n    this.server.on('close', this.handleClose);\n    this.server.on('connection', this.handleConnection);\n    this.server.on('error', this.handleError);\n    this.server.on('listening', this.handleListening);\n\n    this.server.listen(this.socketName);\n\n    this.forkWorker();\n\n    this.queue = [];\n  }\n\n  forkWorker() {\n    this.clearWorkerTimeout();\n\n    if (this.worker) {\n      this.worker = null;\n    }\n\n    this.worker = fork(path.join(__dirname, '..', 'client', 'worker'), [ this.socketName ]);\n  }\n\n  get socketName() {\n    return process.platform === 'win32' ? path.join('\\\\\\\\?\\\\pipe', process.cwd(), this.id)\n                                        : `/tmp/${ this.id }`;\n  }\n\n  handleClose = () => {\n    console.log('server closed');\n  }\n\n  handleConnection = (socket) => {\n    // console.log('server connection');\n    this.socket = new Socket(socket, this);\n  }\n\n  handleError = (error) => {\n    console.log('server error', error);\n  }\n\n  handleListening = () => {\n    console.log('server listening', this.socketName);\n  }\n\n  execute({code, context, timeout}, callback) {\n    const wrappedCallback = (...args) => {\n      if (callback == null || callback.called) {\n        return;\n      }\n\n      callback.called = true;\n\n      callback(...args);\n    };\n\n    this.queue.push({code, context, timeout, callback: wrappedCallback});\n\n    this.executeNext();\n  }\n\n  finishItem() {\n    this.item = null;\n    this.executeNext();\n  }\n\n  executeNext() {\n    if (this.item || this.queue.length === 0) {\n      return;\n    }\n\n    this.item = this.queue.pop();\n\n    const { worker, item } = this;\n\n    worker.removeAllListeners();\n\n    worker.on('error', (error) => {\n      console.error('worker:error', error);\n\n      this.forkWorker();\n\n      item.callback({ error: new Error('worker error') });\n\n      this.finishItem();\n    });\n\n    this.worker.on('exit', () => {\n      // console.error('worker:exit', worker.exitCode);\n    });\n\n    if (item.timeout > 0) {\n      this.clearWorkerTimeout();\n\n      this.executionTimeout = setTimeout(() => {\n        worker.kill();\n\n        this.forkWorker();\n\n        item.callback({ error: new TimeoutError('timeout') });\n  \n        this.finishItem();\n      }, item.timeout);\n    }\n\n    this.worker.send({type: 'execute', code: item.code, context: JSON.stringify(item.context || {})});\n  }\n\n  clearWorkerTimeout() {\n    if (this.worker) {\n      clearTimeout(this.executionTimeout);\n      this.executionTimeout = null;\n    }\n  }\n\n  shutdown() {\n    if (this.socket) {\n      this.socket.shutdown();\n    }\n\n    this.clearWorkerTimeout();\n\n    this.worker.send({ type: 'exit' });\n    this.worker.kill();\n\n    this.server.close(() => {\n      console.log('server shutdown');\n\n      wtfnode.dump();\n    })\n  }\n\n  dispatch({ name, args }, respond, callback) {\n    const params = [ ...args, respond, callback ];\n\n    switch (name) {\n      case 'setResult': {\n        return this.setResult(...params);\n      }\n      case 'httpRequest': {\n        return this.httpRequest(...params);\n      }\n      case 'setTimeout': {\n        return this.setTimeout(...params);\n      }\n      case 'clearTimeout': {\n        return this.clearTimeout(...params);\n      }\n      default: {\n        throw new Error(`${ name } is not a valid method`);\n      }\n    }\n  }\n\n  setResult(result, respond, callback) {\n    // this.worker.send({ type: 'exit' });\n    this.item.callback(result);\n    this.finishItem();\n    respond({ value: null });\n  }\n\n  setTimeout(timeout, respond, callback) {\n    const timerID = setTimeout(callback, timeout);\n\n    respond({ value: +timerID });\n  }\n\n  clearTimeout(timerID, respond, callback) {\n    clearTimeout(timerID);\n\n    respond({ value: null });\n  }\n\n  httpRequest(options, respond, callback) {\n    const { sync } = options;\n\n    request(options, (err, response, body) => {\n      if (response && Buffer.isBuffer(response.body)) {\n        response.body = body = response.body.toString('base64');\n      }\n\n      if (sync) {\n        respond({ value: { err, response, body } });\n      } else {\n        callback(err, response, body);\n      }\n    });\n\n    if (!sync) {\n      respond({ value: null });\n    }\n  }\n}"],"file":"sandbox.js"}