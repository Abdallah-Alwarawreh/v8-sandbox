{"version":3,"sources":["../../lib/server/sandbox.js"],"names":["TimeoutError","Error","isTimeout","tryParseJSON","value","JSON","parse","ex","Socket","constructor","socket","sandbox","console","log","data","id","readInt32BE","json","toString","message","callback","args","worker","send","type","respond","result","stringify","length","Buffer","byteLength","buffer","alloc","writeInt32BE","write","dispatch","error","name","stack","resume","on","handleClose","handleData","handleError","handleDrain","handleTimeout","handleEnd","shutdown","end","unref","Sandbox","socketName","server","net","createServer","handleConnection","handleListening","listen","forkWorker","queue","clearWorkerTimeout","path","join","__dirname","process","platform","cwd","execute","code","context","timeout","wrappedCallback","called","push","executeNext","finishItem","item","pop","removeAllListeners","executionTimeout","setTimeout","kill","clearTimeout","close","wtfnode","dump","params","setResult","httpRequest","timerID","options","sync","err","response","body","isBuffer"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { fork } from 'child_process';\nimport net from 'net';\nimport { v4 as uuid } from 'uuid';\nimport request from 'request';\nimport wtfnode from 'wtfnode';\n\nclass TimeoutError extends Error {\n  get isTimeout() {\n    return true;\n  }\n}\n\nfunction tryParseJSON(value) {\n  try {\n    return JSON.parse(value);\n  } catch (ex) {\n    return null;\n  }\n}\n\nclass Socket {\n  constructor(socket, sandbox) {\n    this.sandbox = sandbox;\n    this.worker = sandbox.worker;\n    this.socket = socket;\n    this.socket.on('close', this.handleClose);\n    this.socket.on('data', this.handleData);\n    this.socket.on('error', this.handleError);\n    this.socket.on('drain', this.handleDrain);\n    this.socket.on('timeout', this.handleTimeout);\n    this.socket.on('end', this.handleEnd);\n  }\n\n  shutdown() {\n    if (this.socket) {\n      this.socket.end();\n      this.socket.unref();\n    }\n  }\n\n  handleClose = () => {\n    console.log('socket closed');\n  }\n\n  handleData = (data) => {\n    // console.log('socket data1', data);\n\n    const id = data.readInt32BE();\n    const json = data.toString('utf8', 4);\n\n    const message = tryParseJSON(json);\n\n    const callback = (...args) => {\n      // make sure the current worker is the worker we started with. The worker might've\n      // been replaced by the time this is invoked.\n      if (this.worker === this.sandbox.worker) {\n        this.sandbox.worker.send({ type: 'callback', id, args });\n      }\n    };\n\n    const respond = (result) => {\n      const json = JSON.stringify({ id, result });\n      const length = Buffer.byteLength(json, 'utf8');\n      const buffer = Buffer.alloc(length + 4);\n  \n      buffer.writeInt32BE(length);\n      buffer.write(json, 4);\n  \n      // console.log('writing json', json);\n      this.socket.write(buffer);\n    }\n\n    try {\n      if (message == null) {\n        throw new Error('invalid dispatch');\n      }\n\n      this.sandbox.dispatch(message, respond, callback);\n    } catch (ex) {\n      return respond({\n        error: {\n          name: ex.name,\n          message: ex.message,\n          stack: ex.stack\n        }\n      });\n    }\n  }\n\n  handleError = (error) => {\n    console.log('socket error', error);\n  }\n\n  handleTimeout = () => {\n    console.log('socket timeout');\n  }\n\n  handleDrain = () => {\n    console.log('socket drain');\n    this.socket.resume();\n  }\n\n  handleEnd = () => {\n    console.log('socket end');\n  }\n}\n\nexport default class Sandbox {\n  constructor() {\n    this.id = uuid();\n\n    this.server = net.createServer();\n\n    this.server.on('close', this.handleClose);\n    this.server.on('connection', this.handleConnection);\n    this.server.on('error', this.handleError);\n    this.server.on('listening', this.handleListening);\n\n    this.server.listen(this.socketName);\n\n    this.forkWorker();\n\n    this.queue = [];\n  }\n\n  forkWorker() {\n    this.clearWorkerTimeout();\n\n    if (this.worker) {\n      this.worker = null;\n    }\n\n    this.worker = fork(path.join(__dirname, '..', 'client', 'worker'), [ this.socketName ]);\n  }\n\n  get socketName() {\n    return process.platform === 'win32' ? path.join('\\\\\\\\?\\\\pipe', process.cwd(), this.id)\n                                        : `/tmp/${ this.id }`;\n  }\n\n  handleClose = () => {\n    console.log('server closed');\n  }\n\n  handleConnection = (socket) => {\n    // console.log('server connection');\n    this.socket = new Socket(socket, this);\n  }\n\n  handleError = (error) => {\n    console.log('server error', error);\n  }\n\n  handleListening = () => {\n    console.log('server listening', this.socketName);\n  }\n\n  execute({code, context, timeout}, callback) {\n    const wrappedCallback = (...args) => {\n      if (callback == null || callback.called) {\n        return;\n      }\n\n      callback.called = true;\n\n      callback(...args);\n    };\n\n    this.queue.push({code, context, timeout, callback: wrappedCallback});\n\n    this.executeNext();\n  }\n\n  finishItem() {\n    this.item = null;\n    this.executeNext();\n  }\n\n  executeNext() {\n    if (this.item || this.queue.length === 0) {\n      return;\n    }\n\n    this.item = this.queue.pop();\n\n    const { worker, item } = this;\n\n    worker.removeAllListeners();\n\n    worker.on('error', (error) => {\n      console.error('worker:error', error);\n\n      this.forkWorker();\n\n      item.callback({ error: new Error('worker error') });\n\n      this.finishItem();\n    });\n\n    this.worker.on('exit', () => {\n      // console.error('worker:exit', worker.exitCode);\n    });\n\n    if (item.timeout > 0) {\n      this.clearWorkerTimeout();\n\n      this.executionTimeout = setTimeout(() => {\n        worker.kill();\n\n        this.forkWorker();\n\n        item.callback({ error: new TimeoutError('timeout') });\n  \n        this.finishItem();\n      }, item.timeout);\n    }\n\n    this.worker.send({type: 'execute', code: item.code, context: JSON.stringify(item.context || {})});\n  }\n\n  clearWorkerTimeout() {\n    if (this.worker) {\n      clearTimeout(this.executionTimeout);\n      this.executionTimeout = null;\n    }\n  }\n\n  shutdown() {\n    if (this.socket) {\n      this.socket.shutdown();\n    }\n\n    this.clearWorkerTimeout();\n\n    this.worker.send({ type: 'exit' });\n    this.worker.kill();\n\n    this.server.close(() => {\n      console.log('server shutdown');\n\n      wtfnode.dump();\n    })\n  }\n\n  dispatch({ name, args }, respond, callback) {\n    const params = [ ...args, respond, callback ];\n\n    switch (name) {\n      case 'setResult': {\n        return this.setResult(...params);\n      }\n      case 'httpRequest': {\n        return this.httpRequest(...params);\n      }\n      case 'setTimeout': {\n        return this.setTimeout(...params);\n      }\n      case 'clearTimeout': {\n        return this.clearTimeout(...params);\n      }\n      default: {\n        throw new Error(`${ name } is not a valid method`);\n      }\n    }\n  }\n\n  setResult(result, respond, callback) {\n    // this.worker.send({ type: 'exit' });\n    this.item.callback(result);\n    this.finishItem();\n    respond({ value: null });\n  }\n\n  setTimeout(timeout, respond, callback) {\n    const timerID = setTimeout(callback, timeout);\n\n    respond({ value: +timerID });\n  }\n\n  clearTimeout(timerID, respond, callback) {\n    clearTimeout(timerID);\n\n    respond({ value: null });\n  }\n\n  httpRequest(options, respond, callback) {\n    const { sync } = options;\n\n    request(options, (err, response, body) => {\n      if (response && Buffer.isBuffer(response.body)) {\n        response.body = body = response.body.toString('base64');\n      }\n\n      if (sync) {\n        respond({ value: { err, response, body } });\n      } else {\n        callback(err, response, body);\n      }\n    });\n\n    if (!sync) {\n      respond({ value: null });\n    }\n  }\n}"],"file":"sandbox.js"}