{"version":3,"sources":["../../lib/server/sandbox.ts"],"names":["TimeoutError","Error","constructor","timeout","isTimeout","nextID","Sandbox","require","template","httpEnabled","timersEnabled","memory","argv","debug","fork","finish","error","message","Promise","resolve","callback","result","type","onInitialize","onExecute","socket","Socket","console","id","process","pid","initializeTimeout","Timer","executeTimeout","functions","Functions","start","code","signal","shutdown","initialize","queue","push","defines","join","output","initialized","execute","globals","context","res","socketName","platform","path","cwd","dispatch","invocation","fail","respond","kill","execArgv","workerPath","__dirname","worker","on","running","clear","removeAllListeners","connected","send","cleanupSocket","fs","unlinkSync","ex","server","net","createServer","handleConnection","handleError","listen","async","processMessage","clearTimers","close","args","handleTimeout","JSON","stringify"],"mappings":"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","sourcesContent":["import path from 'path';\nimport net from 'net';\nimport fs from 'fs';\nimport { fork, ChildProcess } from 'child_process';\nimport async from 'async';\nimport { once } from 'lodash';\nimport onExit from 'signal-exit';\nimport Timer from './timer';\nimport Socket from './socket';\nimport Functions from './functions';\n\nexport interface Log {\n  type: string;\n  time: Date;\n  message: string;\n}\n\nexport interface Result {\n  value?: any;\n  error?: {\n    name: string;\n    message: string;\n    stack: string;\n  };\n  output?: Log[];\n}\n\nexport interface Message {\n  type: 'initialize' | 'execute';\n  template?: string;\n  code?: string;\n  globals?: object;\n  context?: object;\n  output: Log[];\n  timeout: number;\n  callback: Function;\n}\n\nexport interface Options {\n  require?: string;\n  template?: string;\n  httpEnabled?: boolean;\n  timersEnabled?: boolean;\n  memory?: number;\n  argv?: string[];\n  debug?: boolean;\n}\n\nexport interface ExecutionOptions {\n  code: string;\n  timeout?: number;\n  globals?: object;\n  context?: object;\n}\n\nexport class TimeoutError extends Error {\n  constructor(timeout) {\n    super(`timeout: ${timeout}ms`);\n  }\n\n  get isTimeout() {\n    return true;\n  }\n}\n\nlet nextID = 0;\n\nexport default class Sandbox {\n  id: string;\n\n  template: string;\n\n  initializeTimeout: Timer;\n\n  argv: string[];\n\n  executeTimeout: Timer;\n\n  server: net.Server;\n\n  worker: ChildProcess;\n\n  initialized: boolean;\n\n  socket: Socket;\n\n  queue: async.AsyncQueue<Message>;\n\n  message: Message;\n\n  functions: Functions;\n\n  running: boolean;\n\n  debug: boolean;\n\n  memory: number;\n\n  constructor({ require, template, httpEnabled, timersEnabled, memory, argv, debug }: Options = {}) {\n    this.id = `v8-sandbox-${ process.pid }-${ ++nextID }`;\n\n    this.initializeTimeout = new Timer();\n    this.executeTimeout = new Timer();\n    this.memory = memory;\n    this.argv = argv ?? [];\n    this.debug = debug ?? false;\n\n    this.template = template || '';\n    this.functions = new Functions(this, { require, httpEnabled, timersEnabled });\n\n    this.start();\n\n    onExit((code, signal) => {\n      this.shutdown();\n    });\n  }\n\n  initialize({ timeout } = { timeout: null }): Promise<Result> {\n    return new Promise(resolve => {\n      this.queue.push({\n        type: 'initialize',\n        template: [ this.functions.defines().join('\\n'), this.template ].join('\\n'),\n        timeout,\n        output: [],\n        callback: (result: Result) => {\n          this.initialized = true;\n\n          resolve(result);\n        }\n      });\n    });\n  }\n\n  async execute({ code, timeout, globals, context }: ExecutionOptions) {\n    this.start();\n\n    const result = await this.initialize({ timeout });\n\n    if (result.error) {\n      return result;\n    }\n\n    return new Promise(resolve => {\n      this.queue.push({\n        type: 'execute',\n        code,\n        timeout,\n        globals: globals || {},\n        context: context || {},\n        output: [],\n        callback: (res: Result) => {\n          this.initialized = false;\n\n          resolve(res);\n        }\n      });\n    });\n  }\n\n  get socketName() {\n    return process.platform === 'win32' ? path.join('\\\\\\\\?\\\\pipe', process.cwd(), this.id)\n      : `/tmp/${ this.id }`;\n  }\n\n  dispatch(invocation, { fail, respond, callback }) {\n    this.functions.dispatch(invocation, { message: this.message, fail, respond, callback });\n  }\n\n  fork() {\n    this.kill();\n\n    const execArgv = [ ...this.argv ];\n\n    if (this.memory) {\n      execArgv.push(`--max-old-space-size=${this.memory}`);\n    }\n\n    const workerPath = path.join(__dirname, '..', 'client', 'worker');\n\n    this.worker = fork(workerPath, [ this.socketName ], { execArgv });\n\n    this.worker.on('error', (error) => {\n      this.fork();\n      this.finish({ error });\n    });\n\n    this.worker.on('exit', () => {\n      if (this.running) {\n        this.fork();\n      }\n\n      this.finish({ error: new Error('worker exited') });\n    });\n  }\n\n  kill() {\n    this.initializeTimeout.clear();\n    this.executeTimeout.clear();\n\n    if (this.worker) {\n      this.worker.removeAllListeners();\n\n      if (this.worker.connected) {\n        this.worker.send({ type: 'exit' });\n      }\n\n      this.worker.kill();\n      this.worker = null;\n      this.initialized = false;\n    }\n  }\n\n  cleanupSocket() {\n    try {\n      fs.unlinkSync(this.socketName);\n    } catch (ex) {\n      // silent\n    }\n  }\n\n  start() {\n    this.running = true;\n\n    if (this.server) {\n      return;\n    }\n\n    this.shutdown();\n\n    this.server = net.createServer();\n    this.server.on('connection', this.handleConnection);\n    this.server.on('error', this.handleError);\n\n    this.cleanupSocket();\n\n    this.server.listen(this.socketName);\n\n    this.queue = async.queue(this.processMessage, 1);\n\n    this.fork();\n  }\n\n  shutdown() {\n    return new Promise(resolve => {\n      this.running = false;\n\n      this.functions.clearTimers();\n\n      this.kill();\n\n      if (this.socket) {\n        this.socket.shutdown();\n        this.socket = null;\n      }\n\n      if (this.server) {\n        this.server.close(resolve);\n\n        this.cleanupSocket();\n\n        this.server = null;\n      }\n    });\n  }\n\n  handleTimeout = () => {\n    this.fork();\n    this.finish({ error: new TimeoutError(this.message.timeout) });\n  };\n\n  callback(id, args) {\n    this.worker.send({ type: 'callback', id, args });\n  }\n\n  processMessage = async (message: Message) => {\n    this.message = message;\n\n    return new Promise(resolve => {\n      const { callback } = this.message;\n\n      this.message.callback = once((result) => {\n        callback(result);\n        resolve();\n      });\n\n      switch (message.type) {\n        case 'initialize':\n          return this.onInitialize(message);\n        case 'execute':\n          return this.onExecute(message);\n        default:\n          this.finish({ error: new Error('invalid message') });\n      }\n    });\n  };\n\n  onInitialize({ template, timeout }: Message) {\n    if (this.initialized) {\n      return this.finish({});\n    }\n\n    this.initializeTimeout.start(timeout, this.handleTimeout);\n\n    this.worker.send({ type: 'initialize', template });\n  }\n\n  onExecute({ code, timeout, globals, context }: Message) {\n    this.executeTimeout.start(timeout, this.handleTimeout);\n\n    this.worker.send({ type: 'execute', code, globals: JSON.stringify(globals) });\n  }\n\n  finish(result) {\n    this.functions.clearTimers();\n\n    if (this.message) {\n      this.message.callback({ ...result, output: this.message.output });\n    }\n  }\n\n  handleConnection = (socket) => {\n    this.socket = new Socket(socket, this);\n  };\n\n  handleError = (error) => {\n    console.error('server error', error);\n  };\n}\n"],"file":"sandbox.js"}