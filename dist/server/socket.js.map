{"version":3,"sources":["../../lib/server/socket.js"],"names":["tryParseJSON","value","JSON","parse","ex","Socket","constructor","socket","sandbox","console","log","data","id","readInt32BE","json","toString","message","callback","args","worker","send","type","respond","result","stringify","length","Buffer","byteLength","buffer","alloc","writeInt32BE","write","Error","dispatch","error","name","stack","resume","on","handleClose","handleData","handleError","handleDrain","handleTimeout","handleEnd","shutdown","end","unref"],"mappings":"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","sourcesContent":["function tryParseJSON(value) {\n  try {\n    return JSON.parse(value);\n  } catch (ex) {\n    return null;\n  }\n}\n\nexport default class Socket {\n  constructor(socket, sandbox) {\n    this.sandbox = sandbox;\n    this.worker = sandbox.worker;\n    this.socket = socket;\n    this.socket.on('close', this.handleClose);\n    this.socket.on('data', this.handleData);\n    this.socket.on('error', this.handleError);\n    this.socket.on('drain', this.handleDrain);\n    this.socket.on('timeout', this.handleTimeout);\n    this.socket.on('end', this.handleEnd);\n  }\n\n  shutdown() {\n    if (this.socket) {\n      this.socket.end();\n      this.socket.unref();\n    }\n  }\n\n  handleClose = () => {\n    console.log('socket closed');\n  }\n\n  handleData = (data) => {\n    // console.log('socket data1', data);\n\n    const id = data.readInt32BE();\n    const json = data.toString('utf8', 4);\n\n    const message = tryParseJSON(json);\n\n    const callback = (...args) => {\n      // make sure the current worker is the worker we started with. The worker might've\n      // been replaced by the time this is invoked.\n      if (this.worker === this.sandbox.worker) {\n        this.sandbox.worker.send({ type: 'callback', id, args });\n      }\n    };\n\n    const respond = (result) => {\n      const json = JSON.stringify({ id, result });\n      const length = Buffer.byteLength(json, 'utf8');\n      const buffer = Buffer.alloc(length + 4);\n  \n      buffer.writeInt32BE(length);\n      buffer.write(json, 4);\n  \n      // console.log('writing json', json);\n      this.socket.write(buffer);\n    }\n\n    try {\n      if (message == null) {\n        throw new Error('invalid dispatch');\n      }\n\n      this.sandbox.dispatch(message, respond, callback);\n    } catch (ex) {\n      return respond({\n        error: {\n          name: ex.name,\n          message: ex.message,\n          stack: ex.stack\n        }\n      });\n    }\n  }\n\n  handleError = (error) => {\n    console.log('socket error', error);\n  }\n\n  handleTimeout = () => {\n    console.log('socket timeout');\n  }\n\n  handleDrain = () => {\n    console.log('socket drain');\n    this.socket.resume();\n  }\n\n  handleEnd = () => {\n    console.log('socket end');\n  }\n}"],"file":"socket.js"}