{"version":3,"sources":["../../lib/server/socket.js"],"names":["tryParseJSON","value","JSON","parse","ex","Socket","EventEmitter","constructor","socket","sandbox","data","id","readInt32BE","json","toString","message","callback","args","worker","host","write","result","stringify","undefined","length","Buffer","byteLength","buffer","alloc","writeInt32BE","respond","fail","error","name","stack","Error","dispatch","console","resume","on","handleData","handleError","handleDrain","shutdown","end","unref"],"mappings":"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","sourcesContent":["import EventEmitter from 'events';\n\nfunction tryParseJSON(value) {\n  try {\n    return JSON.parse(value);\n  } catch (ex) {\n    return null;\n  }\n}\n\nexport default class Socket extends EventEmitter {\n  constructor(socket, sandbox) {\n    super();\n\n    this.sandbox = sandbox;\n    this.worker = sandbox.host.worker;\n    this.socket = socket;\n    this.socket.on('data', this.handleData);\n    this.socket.on('error', this.handleError);\n    this.socket.on('drain', this.handleDrain);\n  }\n\n  shutdown() {\n    if (this.socket) {\n      this.socket.end();\n      this.socket.unref();\n    }\n  }\n\n  handleData = (data) => {\n    const id = data.readInt32BE();\n    const json = data.toString('utf8', 4);\n\n    const message = tryParseJSON(json);\n\n    const callback = (...args) => {\n      // make sure the current host is the host we started with. The host might've\n      // been replaced by the time this is invoked.\n      if (this.worker === this.sandbox.host.worker) {\n        this.sandbox.host.callback(id, args);\n      }\n    };\n\n    const write = (result) => {\n      const json = JSON.stringify({ id, result: result || { value: undefined } });\n      const length = Buffer.byteLength(json, 'utf8');\n      const buffer = Buffer.alloc(length + 4);\n  \n      buffer.writeInt32BE(length);\n      buffer.write(json, 4);\n  \n      this.socket.write(buffer);\n    };\n\n    const respond = (value) => {\n      write({ value });\n    }\n\n    const fail = (error) => {\n      write({\n        error: {\n          name: error.name,\n          message: error.message,\n          stack: error.stack\n        }\n      });\n    }\n\n    try {\n      if (message == null) {\n        throw new Error('invalid dispatch');\n      }\n\n      this.sandbox.dispatch(message, { fail, respond, callback });\n    } catch (ex) {\n      fail(ex);\n    }\n  }\n\n  handleError = (error) => {\n    console.error('socket error', error);\n  }\n\n  handleDrain = () => {\n    this.socket.resume();\n  }\n}"],"file":"socket.js"}