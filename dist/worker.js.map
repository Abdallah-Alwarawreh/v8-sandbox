{"version":3,"sources":["../lib/worker.js"],"names":["NativeSandbox","require","Sandbox","RUNTIME","fs","readFileSync","path","join","__dirname","toString","Worker","constructor","message","type","execute","callback","id","JSON","stringify","args","process","off","worker","handleMessage","native","argv","console","log","code","result","send","on"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoB,SAApB,EAA+BC,OAArD;;AAEA,MAAMC,OAAO,GAAGC,YAAGC,YAAH,CAAgBC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,YAArB,CAAhB,EAAoDC,QAApD,EAAhB,C,CACA;;;AAEe,MAAMC,MAAN,CAAa;AAC1BC,EAAAA,WAAW,GAAG;AAAA,2CAkBGC,OAAD,IAAa;AAC3B,UAAIA,OAAO,CAACC,IAAR,KAAiB,SAArB,EAAgC;AAC9B,aAAKC,OAAL,CAAaF,OAAb;AACD,OAFD,MAEO,IAAIA,OAAO,CAACC,IAAR,KAAiB,UAArB,EAAiC;AACtC,aAAKE,QAAL,CAAcH,OAAO,CAACI,EAAtB,EAA0BC,IAAI,CAACC,SAAL,CAAeN,OAAO,CAACO,IAAvB,CAA1B;AACD,OAFM,MAEA,IAAIP,OAAO,CAACC,IAAR,KAAiB,MAArB,EAA6B;AAClCO,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,MAAM,CAACC,aAA9B;AACD;AACF,KA1Ba;;AACZ,SAAKC,MAAL,GAAc,IAAIxB,aAAJ,CAAkBoB,OAAO,CAACK,IAAR,CAAa,CAAb,CAAlB,CAAd;AACD;;AAEDX,EAAAA,OAAO,CAACF,OAAD,EAAU;AACfc,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBP,OAAO,CAACK,IAAR,CAAa,CAAb,CAAzB,EAA0Cb,OAA1C;AAEA,UAAMgB,IAAI,GAAG,CAAEzB,OAAF,EAAWS,OAAO,CAACgB,IAAnB,EAA0BrB,IAA1B,CAA+B,IAA/B,CAAb;AAEA,SAAKiB,MAAL,CAAYV,OAAZ,CAAoBc,IAApB,EAA2BC,MAAD,IAAY;AACpCT,MAAAA,OAAO,CAACU,IAAR,CAAa;AAAEjB,QAAAA,IAAI,EAAE,QAAR;AAAkBgB,QAAAA;AAAlB,OAAb;AACD,KAFD;AAGD;;AAEDd,EAAAA,QAAQ,CAACC,EAAD,EAAKJ,OAAL,EAAc;AACpB,SAAKY,MAAL,CAAYT,QAAZ,CAAqBC,EAArB,EAAyBJ,OAAzB;AACD;;AAjByB;;;AA8B5B,MAAMU,MAAM,GAAG,IAAIZ,MAAJ,EAAf;AAEAU,OAAO,CAACW,EAAR,CAAW,SAAX,EAAsBT,MAAM,CAACC,aAA7B","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nconst NativeSandbox = require('bindings')('sandbox').Sandbox;\n\nconst RUNTIME = fs.readFileSync(path.join(__dirname, 'runtime.js')).toString();\n// const LINECOUNT = RUNTIME.split('\\n').length;\n\nexport default class Worker {\n  constructor() {\n    this.native = new NativeSandbox(process.argv[2]);\n  }\n\n  execute(message) {\n    console.log('executing', process.argv[2], message);\n\n    const code = [ RUNTIME, message.code ].join('\\n');\n\n    this.native.execute(code, (result) => {\n      process.send({ type: 'result', result });\n    });\n  }\n\n  callback(id, message) {\n    this.native.callback(id, message);\n  }\n\n  handleMessage = (message) => {\n    if (message.type === 'execute') {\n      this.execute(message);\n    } else if (message.type === 'callback') {\n      this.callback(message.id, JSON.stringify(message.args));\n    } else if (message.type === 'exit') {\n      process.off('message', worker.handleMessage);\n    }\n  }\n}\n\nconst worker = new Worker();\n\nprocess.on('message', worker.handleMessage);"],"file":"worker.js"}