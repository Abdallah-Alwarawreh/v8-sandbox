{"version":3,"sources":["../lib/worker.js"],"names":["NativeSandbox","require","Sandbox","RUNTIME","fs","readFileSync","path","join","__dirname","toString","Worker","constructor","message","console","log","JSON","parse","process","send","type","execute","callback","id","stringify","args","off","worker","handleMessage","native","argv","code","result","on"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoB,SAApB,EAA+BC,OAArD;;AAEA,MAAMC,OAAO,GAAGC,YAAGC,YAAH,CAAgBC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,YAArB,CAAhB,EAAoDC,QAApD,EAAhB,C,CACA;;;AAEe,MAAMC,MAAN,CAAa;AAC1BC,EAAAA,WAAW,GAAG;AAAA,kCAmBNC,OAAD,IAAa;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,OAA/B;AAEAA,MAAAA,OAAO,GAAGG,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAV;AAEAK,MAAAA,OAAO,CAACC,IAAR,CAAa;AAAEC,QAAAA,IAAI,EAAE,UAAR;AAAoBP,QAAAA;AAApB,OAAb;AACD,KAzBa;;AAAA,2CA2BGA,OAAD,IAAa;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,OAA7B;;AAEA,UAAIA,OAAO,CAACO,IAAR,KAAiB,SAArB,EAAgC;AAC9B,aAAKC,OAAL,CAAaR,OAAb;AACD,OAFD,MAEO,IAAIA,OAAO,CAACO,IAAR,KAAiB,UAArB,EAAiC;AACtCN,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,aAAKO,QAAL,CAAcT,OAAO,CAACU,EAAtB,EAA0BP,IAAI,CAACQ,SAAL,CAAeX,OAAO,CAACY,IAAvB,CAA1B;AACD,OAHM,MAGA,IAAIZ,OAAO,CAACO,IAAR,KAAiB,MAArB,EAA6B;AAClCN,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAG,QAAAA,OAAO,CAACQ,GAAR,CAAY,SAAZ,EAAuBC,MAAM,CAACC,aAA9B;AACD;AACF,KAvCa;;AACZ,SAAKC,MAAL,GAAc,IAAI5B,aAAJ,CAAkBiB,OAAO,CAACY,IAAR,CAAa,CAAb,CAAlB,CAAd;AACD;;AAEDT,EAAAA,OAAO,CAACR,OAAD,EAAU;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBG,OAAO,CAACY,IAAR,CAAa,CAAb,CAAzB,EAA0CjB,OAA1C;AAEA,UAAMkB,IAAI,GAAG,CAAE3B,OAAF,EAAWS,OAAO,CAACkB,IAAnB,EAA0BvB,IAA1B,CAA+B,IAA/B,CAAb;AAEA,SAAKqB,MAAL,CAAYR,OAAZ,CAAoBU,IAApB,EAA2BC,MAAD,IAAY;AACpClB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBiB,MAAxB;AACAd,MAAAA,OAAO,CAACC,IAAR,CAAa;AAAEC,QAAAA,IAAI,EAAE,QAAR;AAAkBY,QAAAA;AAAlB,OAAb;AACD,KAHD,EAGG,KAAKb,IAHR;AAID;;AAEDG,EAAAA,QAAQ,CAACC,EAAD,EAAKV,OAAL,EAAc;AACpB,SAAKgB,MAAL,CAAYP,QAAZ,CAAqBC,EAArB,EAAyBV,OAAzB;AACD;;AAlByB;;;AA2C5B,MAAMc,MAAM,GAAG,IAAIhB,MAAJ,EAAf;AAEAO,OAAO,CAACe,EAAR,CAAW,SAAX,EAAsBN,MAAM,CAACC,aAA7B","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nconst NativeSandbox = require('bindings')('sandbox').Sandbox;\n\nconst RUNTIME = fs.readFileSync(path.join(__dirname, 'runtime.js')).toString();\n// const LINECOUNT = RUNTIME.split('\\n').length;\n\nexport default class Worker {\n  constructor() {\n    this.native = new NativeSandbox(process.argv[2]);\n  }\n\n  execute(message) {\n    console.log('executing', process.argv[2], message);\n\n    const code = [ RUNTIME, message.code ].join('\\n');\n\n    this.native.execute(code, (result) => {\n      console.log('finished', result);\n      process.send({ type: 'result', result });\n    }, this.send);\n  }\n\n  callback(id, message) {\n    this.native.callback(id, message);\n  }\n\n  send = (message) => {\n    console.log('GOT HERE!!!!!!!', message);\n\n    message = JSON.parse(message);\n\n    process.send({ type: 'dispatch', message });\n  }\n\n  handleMessage = (message) => {\n    console.log('got a message', message);\n\n    if (message.type === 'execute') {\n      this.execute(message);\n    } else if (message.type === 'callback') {\n      console.log('worker.callback!');\n      this.callback(message.id, JSON.stringify(message.args));\n    } else if (message.type === 'exit') {\n      console.log('exiting');\n      process.off('message', worker.handleMessage);\n    }\n  }\n}\n\nconst worker = new Worker();\n\nprocess.on('message', worker.handleMessage);"],"file":"worker.js"}